#! /bin/bash

function versioninfo
{
	VERSION="$Revision$"
	VERSION="${VERSION%\ \$}"; VERSION="${VERSION#\:}"; VERSION="${VERSION##\ }"
	VERSION="(CVS revision $VERSION)"
	
	NAME="$Name$"
	NAME="${NAME%\ \$}"; NAME="${NAME#\:}"; NAME="${NAME##\ }"; NAME="${NAME##release-}"; NAME="${NAME//-/.}"
	[[ -n $NAME ]] && NAME="Version $NAME "

	echo ${CMDNAME}
	echo ${NAME}${VERSION}

	echo -e "\nCopyright (C) 2010 Hacking Networked Solutions"
	echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
	echo "This is free software: you are free to change and redistribute it."
	echo "There is NO WARRANTY, to the extent permitted by law."
}

function helpscreen
{
	NAME=$(basename ${0})
	echo "Usage: ${NAME} [OPTION]... PACKAGE [PACKAGE]..."
	echo "Manages slot specific package entries in the world file to ensure that depclean"
	echo "does not clean needed packages and unavailable packages are noted."
	echo
	echo "  -a, --add-installed            adds the currently installed slotted versions of"
	echo "                                 PACKAGEs to the world file"
	echo "  -r, --remove-unavailable       removes any slotted versions of PACKAGEs which"
	echo "                                 are no longer available from the world file"
	echo "  -R, --remove-all               removes ALL slotted versions of PACKAGEs from"
	echo "                                 the world file"
	echo "  -p, --pretend                  do not perform any actions"
	echo "  -v, --verbose                  produce more output"
	echo "      --help                     display this help and exit"
    echo "      --version                  output version information and exit"
}

# Process command line switches
while (( $# > 0 ))
do
	case $1 in
		-a|--add-installed)
			ADD="yes"
			shift 1
		;;
	    -r|--remove-unavailable)
			REMOVE="yes"
			shift 1
	    ;;
	    -R|--remove-all)
			REMOVE="yes"
			REMOVEALL="yes"
			shift 1
	    ;;
	    -p|--pretend)
			PRETEND="yes"
			shift 1
	    ;;
	    -v|--verbose)
			VERBOSE="yes"
			shift 1
	    ;;
				
		--version)
			versioninfo
			exit
		;;	
		-*|--*)
			helpscreen
			shift 1
			exit
		;;
		
		*)
			[[ -z ${PKG_LIST} ]] && PKG_LIST=$1 || PKG_LIST="${PKG_LIST} $1"
			shift 1
		;;
	esac
done

# By now we should have a collection of at least one package atom
[[ -z ${PKG_LIST} ]] && echo "ERROR: Package atom expected" >&2 && exit 1

# Sort the package list
PKG_LIST=$(echo "${PKG_LIST}" | tr " " "\n" | sort | tr "\n" " ")

# If we haven't been asked to add or remove then do both!
if [[ -z ${ADD} && -z ${REMOVE} ]]; then
	ADD="yes"
	REMOVE="yes"
fi

# Get the portage directory
PORTDIR=$(portageq portdir)
[[ -z ${PORTDIR} ]] && echo "ERROR: Unable to locate PORTDIR" >&2 && exit 2

# If we have been asked to add packages to the world file then...
if [[ -n ${ADD} ]]; then
	# ...loop through the packages we were passed...
	for PKG in ${PKG_LIST}; do
		# ...adding all slot versions of the specified package to the world file...
		PKG_SLOTS=$(qlist -I -C -S -e ${PKG} | cut -f 2 -d ":" | cut -f 2 -d " " | xargs)
		PKG_NAME=$(qlist -I -C -e ${PKG} | tail --lines=1)
		if [[ -z ${PKG_SLOTS} ]]; then
			echo "ERROR: No versions of ${PKG} are installed" >&2
		else
			if [[ ${PKG_SLOTS} == "0" ]]; then
				echo  "ERROR: ${PKG} is not a slotted package" >&2
			else
				for SLOT in ${PKG_SLOTS}; do
					grep "^${PKG_NAME}:${SLOT}$" /var/lib/portage/world > /dev/null
					if (( $? == 1 )); then
						if [[ -z ${WORLDMOD} && -n ${PRETEND} ]]; then
							cp /var/lib/portage/world /var/lib/portage/world.bak
							WORLDMOD="yes"
						fi
						echo -n "    ${PKG_NAME}:${SLOT} "
						[[ -z ${PRETEND} ]] && echo "added to world" || echo "would be added to world"  
						[[ -z ${PRETEND} ]] && echo "${PKG_NAME}:${SLOT}" >> /var/lib/portage/world
					else
						[[ -n ${VERBOSE} ]] && echo "    ${PKG_NAME}:${SLOT} already in world"
					fi
				done
			fi
		fi
	done
fi

# If we have been asked to remove packages from the world file then...
if [[ -n ${REMOVE} ]]; then
	# ...loop through the packages we were passed...
	for PKG in ${PKG_LIST}; do
		PKG_SLOTS=$(grep "^${PKG}:" /var/lib/portage/world | xargs)
		if [[ -z ${PKG_SLOTS} ]]; then
			echo "ERROR: No slot specified versions of ${PKG} are installed" >&2
		else
			for SLOT in ${PKG_SLOTS}; do
				PKG_VER=$(portageq best_visible ${PORTDIR} ${SLOT})
				if [[ -z ${PKG_VER} || -n ${REMOVEALL} ]]; then
					if [[ -z ${WORLDMOD} && -n ${PRETEND} ]]; then
						cp /var/lib/portage/world /var/lib/portage/world.bak
						WORLDMOD="yes"
					fi
					echo -n "    ${SLOT} "
					[[ -z ${PRETEND} ]] && echo "removed from world" || echo "would be removed from world"  
					if [[ -z ${PRETEND} ]]; then
						grep -Ev "^${SLOT}$" /var/lib/portage/world > /var/lib/portage/world.new
						(( ! $? )) && mv /var/lib/portage/world.new /var/lib/portage/world
					fi
				else
					[[ -n ${VERBOSE} ]] && echo "    ${SLOT} still available"
				fi
			done
		fi
	done
fi

# If the world file was modified then sort it
if [[ -n ${WORLDMOD} ]]; then
	sort /var/lib/portage/world > /var/lib/portage/world.new
	(( ! $? )) && mv /var/lib/portage/world.new /var/lib/portage/world
fi

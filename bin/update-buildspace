#! /bin/bash

function versioninfo
{
	VERSION="$Revision$"
	VERSION="${VERSION%\ \$}"; VERSION="${VERSION#\:}"; VERSION="${VERSION##\ }"
	VERSION="(CVS revision $VERSION)"
	
	NAME="$Name$"
	NAME="${NAME%\ \$}"; NAME="${NAME#\:}"; NAME="${NAME##\ }"; NAME="${NAME##release-}"; NAME="${NAME//-/.}"
	[[ -n $NAME ]] && NAME="Version $NAME "

	echo ${CMDNAME}
	echo ${NAME}${VERSION}

	echo -e "\nCopyright (C) 2010 Hacking Networked Solutions"
	echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
	echo "This is free software: you are free to change and redistribute it."
	echo "There is NO WARRANTY, to the extent permitted by law."
}

function helpscreen
{
	echo "Usage: ${CMDNAME}"
	echo "Automatically updates the build-space by downloading all required packages,"
	echo "building updated packages, merging new configuration files, removing"
	echo "redundant libraries and packages, rebulding packages broken by the update"
	echo "and running python-updater and perl-cleaner as required." 
	echo
	echo "  -b, --quiet-build              pass the --quiet-build flag to emerge"
	echo "                                 to suppress most build output" 
	echo "  -e, --send-email               send an email of the update logs to the"
	echo "                                 email address specified in ${CFGFILE}"
	echo "                                 (implied if not being run from a TTY)"
	echo "  -k, --keep-going               pass the --keep-going flag to emerge to"
	echo "                                 cause emerge not to stop if a build error"
	echo "                                 is encountered" 
	echo "  -q, --quiet                    do not produce any output during the"
	echo "                                 update process (implies --send-email)"
	echo "  -r, --remerge-all              remerge all installed packages instead"
	echo "                                 of performing an update"
	echo "      --help                     display this help and exit"
    echo "      --version                  output version information and exit"
}

function okorfail
{
	if (( ! $? )); then
		echo "ok." 
	else
		echo "failed."
		EXITSTATUS=$1
	fi
}

# Update environment and source the profile
env-update --no-ldconfig &>/dev/null
source /etc/profile &>/dev/null

# Init global vars
OUTLOGLIB=/usr/lib/outlogger.sh
CFGFILE=/etc/buildspace
CMDNAME=$(basename ${0})
EXITSTATUS=0

# Workaround for python bug 13107 - http://bugs.python.org/issue13107
[[ -z "$COLUMNS" ]] && export COLUMNS=80

# The default update command parameters.
UPDATE_OPTS="--update --deep --newuse world"
UPDATE_FLAGS=""

# Process command line switches
while (( $# > 0 ))
do
	case $1 in
		-b|--quiet-build)
			UPDATE_FLAGS="${UPDATE_FLAGS} --quiet-build"
		;;			
	    -e|--send-email)
			SENDEMAIL=1
	    ;;
	    -k|--keep-going)
	    	UPDATE_FLAGS="${UPDATE_FLAGS} --keep-going"
	    ;;
	    -q|--quiet)
			QUIET=1
			SENDEMAIL=1
	    ;;
	    -r|--remerge-all)
			UPDATE_OPTS="--emptytree world"
	    ;;
								
		--version)
			versioninfo
			exit
		;;	
		*)
			helpscreen
			exit
		;;
	esac
	shift 1
done

# Create the fetch options from the update options.
FETCH_OPTS="--fetchonly ${UPDATE_OPTS}"


# If the config file exists and we can read it do so, otherwise complain and quit
[[ ! -r ${CFGFILE} ]] && echo "ERROR: Unable to read config file at ${CFGFILE}" >&2 && exit 1 
source ${CFGFILE}

# Include and initialise logging library
[[ ! -r ${OUTLOGLIB} ]] && echo "ERROR: Unable to load outlogger library from ${OUTLOGLIB}" >&2 && exit 2
[[ -z "${LOGPATH}" ]] && echo "ERROR: No LOGPATH set in ${CFGFILE}" >&2 && exit 1
source ${OUTLOGLIB}
init_logging ${LOGPATH}

# Check to make sure we are being run from inside the buildspace.
[[ -z "${BUILDSPACE_NAME}" ]] && echo "ERROR: ${CMDNAME} should only be run inside a configured buildspace!" >&2 && exit 1

# Clean the portage and binary package temporary directories
PTD=$(portageq envvar PORTAGE_TMPDIR)
[[ -z "${PTD}" || (( ! $? )) ]] && echo "ERROR: Unable to locate PORTAGE_TMPDIR" >&2 && exit 2
rm -rf ${PTD}/portage/*
(( $? )) && echo "ERROR: Unable to clean ${PTD}/portage" >&2 && exit 3
rm -rf ${PTD}/binpkgs/*
(( $? )) && echo "ERROR: Unable to clean ${PTD}/binpkgs" >&2 && exit 3

# If we are not being run from a TTY then set SENDMAIL and QUIET
tty -s
if (( $? )); then
	SENDEMAIL=1
	QUIET=1
fi  

# If we are running in quiet mode then redirect output to the log
# otherwise tee output to the log and stdout
if [[ -n ${QUIET} ]]; then
	redirect_output_to_file update.out.log
else
	tee_output_to_file_stdout update.out.log
fi

echo -e "Starting automated update of [${BUILDSPACE_NAME}] buildspace.\n"

# Do a pretend update for the logs
echo -n "Performing pretend update..."
exec_and_log pretend_update "emerge --color n --nospinner --pretend --verbose ${UPDATE_OPTS}"
okorfail 4

# If things are still working so far...
if (( ! ${EXITSTATUS} )); then
	# Ensure free space is available for distfiles
	free-distfiles-space --free-delete

	# Fetch distfiles
	echo -n "Fetching required distfiles..."
	exec_and_log fetch_phase "emerge --color n --nospinner ${FETCH_OPTS}"
	okorfail 5
fi

# If things are still working so far...
if (( ! ${EXITSTATUS} )); then
	# Store and display current key package versions and slots.
	PRE_PERL_PKG=$(qlist -I -C -v -e dev-lang/perl)
	PRE_PYTHON_PKGS=$(qlist -I -C -v -e dev-lang/python | xargs)
	PRE_PYTHON_SLOT=$(qlist -I -C -S -e dev-lang/python | cut -f 2 -d " " | xargs)
	PRE_PORTAGE_PKG=$(qlist -I -C -v -e sys-apps/portage)
	PRE_GCC_PKGS=$(qlist -I -C -v -e sys-devel/gcc | xargs)
	PRE_GCC_SLOT=$(qlist -I -C -S -e sys-devel/gcc | cut -f 2 -d " " | xargs)
	PRE_HEADERS_PKG=$(qlist -I -C -v -e sys-kernel/linux-headers)
	PRE_GLIBC_PKG=$(qlist -I -C -v -e sys-libs/glibc)
	
	[[ -z ${PRE_PERL_PKG} ]] && echo "Error: Unable to retrieve current dev-lang/perl version" && exit 4
	[[ -z ${PRE_PYTHON_PKGS} || -z ${PRE_PYTHON_SLOT} ]] && echo "Error: Unable to retrieve current dev-lang/python version" && exit 4
	[[ -z ${PRE_PORTAGE_PKG} ]] && echo "Error: Unable to retrieve current sys-apps/portage version" && exit 4
	[[ -z ${PRE_GCC_PKGS} || -z ${PRE_GCC_SLOT} ]] && echo "Error: Unable to retrieve current sys-devel/gcc version" && exit 4
	[[ -z ${PRE_HEADERS_PKG} ]] && echo "Error: Unable to retrieve current sys-kernel/linux-headers version" && exit 4
	[[ -z ${PRE_GLIBC_PKG} ]] && echo "Error: Unable to retrieve current sys-libs/glibc version" && exit 4
	
	echo -e "\nKey package versions [pre update]"
	echo "    ${PRE_PERL_PKG}"
	echo "    ${PRE_PYTHON_PKGS} in slot(s) ${PRE_PYTHON_SLOT}"
	echo "    ${PRE_PORTAGE_PKG}"
	echo "    ${PRE_GCC_PKGS} in slot(s) ${PRE_GCC_SLOT}"
	echo "    ${PRE_HEADERS_PKG}"
	echo -e "    ${PRE_GLIBC_PKG}\n"
			
	# Ensure that key slotted packages are specified in world file and include slot number
	if [[ -n $(manage-slot-in-world --add-installed --pretend ${KEEP_PACKAGES} ${KEEP_KERNELS}) ]]; then
		echo "Ensuring that key packages are in world file and include slot number"
		manage-slot-in-world --add-installed ${KEEP_PACKAGES} ${KEEP_KERNELS}
		echo
	fi 
	 
	# Build updated packages
	echo -n "Building updated packages..."
	exec_and_log build_phase "emerge --color n --nospinner ${UPDATE_FLAGS} ${UPDATE_OPTS}"
	okorfail 6
	
	# Store new kernel headers and glibc key package versions and slots.
	POST_HEADERS_PKG=$(qlist -I -C -v -e sys-kernel/linux-headers)
	POST_GLIBC_PKG=$(qlist -I -C -v -e sys-libs/glibc)

	# If the kernel headers got an update and glibc didn't then rebuild it
	if [[ ${PRE_HEADERS_PKG} != ${POST_HEADERS_PKG} && ${PRE_GLIBC_PKG} == ${POST_GLIBC_PKG} ]]; then
		echo -n "Rebuilding sys-libs/glibc against ${POST_HEADERS_PKG}..."
		exec_and_log glibc_rebuild "emerge --color n --nospinner -1 sys-libs/glibc"
		okorfail 7
	fi
	
	# Merge default configurations
	echo -n "Merging new default configurations..."
	exec_and_log config_merge "merge-new-configs"
	okorfail 8
	
	# Clean orphaned dependencies
	echo -n "Cleaning orphaned dependencies..."
	exec_and_log depclean "emerge --color n --nospinner --depclean"
	okorfail 9
	
	# Remove old libraries kept by preserve-libs
	echo -n "Removing redundant libraries..."
	exec_and_log delete_redundant_libs "delete-redundant-libs"
	okorfail 10
	add_aux_logs delete_redundant_libs
	
	# Fix broken .la files
	echo -n "Fixing broken .la files..."
	exec_and_log lafilefixer "lafilefixer --justfixit"
	okorfail 11
	
	# Store new python key package versions and slots.
	POST_PYTHON_PKGS=$(qlist -I -C -v -e dev-lang/python | xargs)
	POST_PYTHON_SLOT=$(qlist -I -C -S -e dev-lang/python | cut -f 2 -d " " | xargs)

	# Create python-updater arguement list based on python upgrade type (minor or major)
	[[ ${POST_PYTHON_PKGS} != ${PRE_PYTHON_PKGS} ]] && \
		PYUPDARGS="--enable-static_linking --enable-shared_linking --enable-manual --enable-need_rebuild"
	[[ ${POST_PYTHON_SLOT} != ${PRE_PYTHON_SLOT} ]] && \
		PYUPDARGS="${PYUPDARGS} --enable-pylibdir --enable-PYTHON_ABIS"

	# Ensure any python packages broken by an update are rebuilt if needed
	if [[ -n ${PYUPDARGS} ]]; then
		echo -n "Rebuilding broken python packages..."
		exec_and_log python_updater "python-updater ${PYUPDARGS}"
		okorfail 12
	fi
	
	# Store new perl key package versions and slots.
	POST_PERL_PKG=$(qlist -I -C -v -e dev-lang/perl)

	# Create perl-cleaner arguement list
	[[ ${POST_PERL_PKG} != ${PRE_PERL_PKG} ]] && \
		PERLCARGS="modules libperl ph-clean"
	[[ ${POST_HEADERS_PKG} != ${PRE_HEADERS_PKG} ]] && \
		PERLCARGS="${PERLCARGS} phupdate"

	# Ensure any perl packages broken by an update are rebuilt if needed
	if [[ -n ${PERLCARGS} ]]; then
		echo -n "Rebuilding broken perl packages..."
		exec_and_log perl_cleaner "perl-cleaner ${PERLCARGS}"
		if (( $? < 2 )); then
			echo "ok."
		else
			echo "failed."
			EXITSTATUS=13
		fi
	fi
	
	# Rebuild broken binaries
	echo -n "Rebuilding broken binaries (pass 1 - pretend)..."
	exec_and_log revdep_rebuild_1_pretend "revdep-rebuild -pi -P -C -- --color n --nospinner"
	okorfail 14
	if [[ -e /var/cache/revdep-rebuild/3_broken.rr ]]; then
		echo -n "Rebuilding broken binaries (pass 1 - remerge)..."
		exec_and_log revdep_rebuild_1_remerge "revdep-rebuild -P -C -- --color n --nospinner"
		okorfail 15
		
		echo -n "Rebuilding broken binaries (pass 2 - pretend)..."
		exec_and_log revdep_rebuild_2_pretend "revdep-rebuild -pi -P -C -- --color n --nospinner"
		okorfail 16
		if [[ -e /var/cache/revdep-rebuild/3_broken.rr ]]; then
			echo -n "Rebuilding broken binaries (pass 2 - remerge)..."
			exec_and_log revdep_rebuild_2_remerge "revdep-rebuild -P -C -- --color n --nospinner"
			okorfail 17
		fi
	fi
	
	# Ensure all required distfiles have been accessed
	echo -n "Touching all required distfiles..."
	exec_and_log touch_all "emerge -e --fetchonly world --with-bdeps y"
	okorfail 18
	
	# Remove unused binary packages
	echo -n "Cleaning unused packages..." 
	exec_and_log clean_unused "qpkg --clean"
	okorfail 19

	# Fix the package cache for the binhost
	echo -n "Fixing package cache..." 
	rm /mnt/portage/packages/Packages -f
	emaint --fix binhost 1>/dev/null 
	okorfail 20

	# Store any new news items for email attachment later
	NEWSITEMS=$(eselect news count new)
	if (( ${NEWSITEMS} > 0 )); then
		echo -n "Getting ${NEWSITEMS} news item(s) for later reading..."
		exec_and_log news "eselect news read new"
		okorfail 21
	fi

	# Store remaining key package versions and slots.
	POST_PORTAGE_PKG=$(qlist -I -C -v -e sys-apps/portage)
	POST_GCC_PKGS=$(qlist -I -C -v -e sys-devel/gcc | xargs)
	POST_GCC_SLOT=$(qlist -I -C -S -e sys-devel/gcc | cut -f 2 -d " " | xargs)

	# Display new key package versions and slots.
	echo -e "\nKey package versions [post update]"
	echo "    ${POST_PERL_PKG}"
	echo "    ${POST_PYTHON_PKGS} in slot(s) ${POST_PYTHON_SLOT}"
	echo "    ${POST_PORTAGE_PKG}"
	echo "    ${POST_GCC_PKGS} in slot(s) ${POST_GCC_SLOT}"
	echo "    ${POST_HEADERS_PKG}"
	echo "    ${POST_GLIBC_PKG}"
	
	# Display any slotted packages which are no longer available
	if [[ -n $(manage-slot-in-world --remove-unavailable --pretend ${KEEP_PACKAGES} ${KEEP_KERNELS}) ]]; then
		echo -e "\nThe following key packages are no longer available in portage"
		manage-slot-in-world --remove-unavailable --pretend ${KEEP_PACKAGES} ${KEEP_KERNELS}
	fi 
fi

# Display completion state
if (( ! ${EXITSTATUS} )); then
	echo -e "\nAutomated update of [${BUILDSPACE_NAME}] buildspace completed.\n"
else
	echo -e "\nAutomated update of [${BUILDSPACE_NAME}] buildspace failed.\n"
fi

# End logging redirect
end_log_redirect

# Bzip any log files larger than 100k
bzip_large_logs 102400

# If we were asked to send email send the logs to root
if [[ -n ${SENDEMAIL} ]]; then
	send_logs_by_email "Automated update of ${BUILDSPACE_NAME}" root
fi

# If we aren't running in quiet mode show a list of the log files we generated during the update
if [[ -z ${QUIET} ]]; then
	display_log_paths
fi

exit ${EXITSTATUS}
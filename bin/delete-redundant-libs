#! /bin/bash

function versioninfo
{
	VERSION="$Revision$"
	VERSION="${VERSION%\ \$}"; VERSION="${VERSION#\:}"; VERSION="${VERSION##\ }"
	VERSION="(CVS revision $VERSION)"
	
	NAME="$Name$"
	NAME="${NAME%\ \$}"; NAME="${NAME#\:}"; NAME="${NAME##\ }"; NAME="${NAME##release-}"; NAME="${NAME//-/.}"
	[[ -n $NAME ]] && NAME="Version $NAME "

	echo ${CMDNAME}
	echo ${NAME}${VERSION}

	echo -e "\nCopyright (C) 2010 Hacking Networked Solutions"
	echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
	echo "This is free software: you are free to change and redistribute it."
	echo "There is NO WARRANTY, to the extent permitted by law."
}

function helpscreen
{
	echo "Usage: ${CMDNAME} [OPTION]..."
	echo "Runs revdep-rebuild --library for libraries requiring it and deletes any"
	echo "libraries which are no longer required once the rebuild is complete"
	echo
	echo "  -l DIR, --log-path DIR         use the log directory specified in DIR"
	echo "                                 instead of that found in ${CFGFILE}"
	echo "  -p, --pretend                  do not perform any actions but list libraries"
	echo "                                 which would require the use of revdep-rebuild"
	echo "                                 and those which can be safely deleted"
	echo "      --help                     display this help and exit"
    echo "      --version                  output version information and exit"
}

# Init local vars
CFGFILE=/etc/buildspace
CMDNAME=$(basename ${0})

# Process command line switches
while (( $# > 0 ))
do
	case $1 in
		-l|--log-path)
			LOGPATH=$2
			shift 2
	    ;;
	    -p|--pretend)
			PRETEND=1
			shift 1
	    ;;

		--version)
			versioninfo
			exit
		;;	
		*)
			helpscreen
			shift 1
			exit
		;;
	esac
done

# If the config file exists and we can read it do so
[[ ! -r ${CFGFILE} ]] && echo "Error: No config file (or no read permissions) at ${CFGFILE}" >&2 && exit 2
source ${CFGFILE}

# Check config
[[ -z ${BUILDSPACE_NAME} ]] && echo "ERROR: ${CMDNAME} should only be run inside a configured buildspace!" >&2 && exit 2
[[ -z ${LOGPATH} ]] && echo "ERROR: You have no LOGPATH set in ${CFGFILE} and none was specified" >&2 && exit 2

# Path to the build log.
BLP="${LOGPATH}/build_phase.out.log"
[[ ! -r ${BLP} ]] && echo "ERROR: Unable to read build phase log file at ${BLP}" >&2 && exit 3
[[ ! -w ${LOGPATH} ]] && echo "ERROR: No write permissions on ${LOGPATH}" >&2 && exit 3

# Search the build log and display any libraries for which a revdep-rebuild is suggested.
echo "Libraries needing revdep-rebuild:"
REBUILDLIBS=$(awk '/revdep-rebuild.+--library/ { print $5 }' < ${BLP} )
REBUILDLIBS=${REBUILDLIBS//\'/}
if [[ -z ${REBUILDLIBS} ]]; then
	echo "    none"
else
	for L in ${REBUILDLIBS}; do
		echo "    ${L}"
	done
fi

# Search the build log and display any libraries which can be safely removed.
echo -e "\nLibraries which can be safely deleted once rebuild complete:"
DELETELIBS=$(awk '/revdep-rebuild.+--library.+&&/ { print $8 } /#[[:blank:]]+rm.+lib.+/ { print $3 }' < ${BLP} )
DELETELIBS=${DELETELIBS//\'/}
if [[ -z ${DELETELIBS} ]]; then
	echo "    none"
else
	PKGLIST=" "
	for L in ${DELETELIBS}; do
		if [[ -e ${L} ]]; then
			echo -n "    ${L} - "
			OWNINGPKG=$(qfile -v -C ${L} | cut -f 1 -d " ")
			if [[ -n ${OWNINGPKG} ]]; then
				echo "owned by ${OWNINGPKG}"
				[[ "${PKGLIST}" =~ [[:blank:]]${OWNINGPKG}[[:blank:]] ]] || PKGLIST="${PKGLIST}${OWNINGPKG} "
			else
				echo "unclaimed!"
			fi
		fi
	done
fi

# If we are only pretending then this is it
[[ -n ${PRETEND} ]] && exit

# Rebuild any packages using libraries found above 
if [[ -n ${REBUILDLIBS} ]]; then
	echo -e "\nStarting revdep-rebuild of packages using above libraries:"  
	for L in ${REBUILDLIBS}; do
		echo -n "    ${L} "
		LP=${L//\//_}
		revdep-rebuild --no-progress --library ${L} \
			1>${LOGPATH}/delete_redundant_libs.rr.${LP}.aux.out.log 2>${LOGPATH}/delete_redundant_libs.rr.${LP}.aux.err.log
		(( ! $? )) && echo " - ok" || echo " - failed"
	done
fi

# Delete any libraries which are no longer needed
if [[ -n ${DELETELIBS} ]]; then
	echo -e "\nDeleting old libraries:"  
	for L in ${DELETELIBS}; do
		if [[ -e ${L} ]]; then
			echo -n "    ${L}"
			rm ${L}
			(( ! $? )) && echo " - ok" || echo " - failed"
		fi
	done
fi

# Rebuild any binary packages containing above libraries
if [[ -n ${PKGLIST} && ${PKGLIST} != " " ]]; then 
	echo -e "\nRebuilding binary packages containing preserved libraries:"
	for PKG in ${PKGLIST}; do
		echo -n "    ${PKG} "
		LPKG=${PKG//\//_}
		emerge -1 =${PKG} \
			1>${LOGPATH}/delete_redundant_libs.rm.${LPKG}.aux.out.log 2>${LOGPATH}/delete_redundant_libs.rm.${LPKG}.aux.err.log
		(( ! $? )) && echo " - ok" || echo " - failed"
	done
fi